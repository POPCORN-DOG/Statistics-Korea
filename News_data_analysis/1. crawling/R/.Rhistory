html <- read_html(remdr$getPageSource()[[1]])
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
box <- html %>% html_nodes('.basicList_inner__eY_mq')
if (length(box)==0){print('검색결과 없음')}else{
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
items_t <- remdr$findElements(using = 'class', value = 'basicList_mall__sbVax')
item_list_t <- lapply(items_t, function(x){x$getElementText()})
for (i in 1:length(item_list_t)) {
item_1 <- str_split(item_list_t[[i]],'\n') # 3가지 타입 구분하기 1 8 12
id <- box[i] %>% html_nodes('.basicList_info_area__17Xyo') %>%  html_nodes('.basicList_link__1MaTN') %>% html_text()
if( item_1[[1]][1] == "" ){ #이미지 판매처
items <- box[i] %>%  html_nodes('.basicList_mall_title__3MWFY') %>% html_nodes('img') %>% html_attr('alt')
list_shop <- rbind(list_shop,items) #이미지 판매처 넣기
#    Sys.sleep(0.3)
list_id <- rbind(list_id,id) #상품명 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#    Sys.sleep(0.3)
print("이미지 판매처")
cat(i)
}else{
if(item_1[[1]][1] == "쇼핑몰별 최저가"){
aa_s <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_mall_name__1XaKA') %>% html_text()
aa_p <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_price__2r23_') %>% html_text()%>%
str_replace_all('\\D','') %>% as.integer()
for(j in 1:5){
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
list_shop <-rbind(list_shop,aa_s[j])
list_price <- rbind(list_price,aa_p[j])
#      Sys.sleep(0.3)
list_dp <- rbind(list_dp,'0' %>% as.integer())
}
print('가격비교')
cat(i)
}else{
list_shop <- rbind(list_shop,item_1[[1]][1]) #판매처 넣기
#      Sys.sleep(0.3)
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#      Sys.sleep(0.3)
print('기본형식')
cat(i)
}
}
}}; print(paste0(i,'번 끝'))
list_item <- unique(cbind.data.frame(list_id,list_shop,list_price,list_dp))
list_item[is.na(list_item)] <- 0
list_item <- list_item %>% filter(!is.na(list_shop))
return(list_item)
}
#찾고 싶은 상품 검색 후
url <- remdr$getCurrentUrl()
#list_kkh <- shopping_kkh_fix(a23[[1]][1])
#write.csv(list_kkh,'C:/Users/USER/Desktop/t.csv')
a<-shopping_kkh_fix(url)
View(a)
a
head(a)
head(a,10)
head(a,20)
head(a,10)
head(a,10)
head(a,20)
head(a,15)
head(a,14)
mask_data <- a
head(mask_data,14)
head(mask_data,14)
mask_data
mask_data
head(mask_data,14)
head(mask_data,14)
head(mask_data,14)
head(mask_data,14)
head(mask_data,10)
duplicated(mask_data)
mask_data = DUPLICATE[-which(duplicated(mask_data$list_id)),]
mask_data = mask_data[-which(duplicated(mask_data$list_id)),]
head(mask_data,10)
head(mask_data,10)
length('asd')
mask_data[0]
mask_data$list_id
mask_data$list_id[1]
mask_data$list_id[0]
nchar(mask_data$list_id)
type(mask_data$list_id)
str(mask_data$list_id)
nchar(str(mask_data$list_id))
nchar(str(mask_data$list_id))
a <- mask_data$list_id
a[0]
a[,1]
a(1)
a{1}
a[1]
print(a[1])
print(a[11])
aa <- str(a[11])
print(a[11][0])
mask_data$list_id
a <- as.character(mask_data$list_id)
a[1]
length(a[1])
nchar(a[1])
nchar(as.character(mask_data$list_id))
mask_data$len <- nchar(as.character(mask_data$list_id))
View(mask_data)
mask_data2 <- mask_data[ order(len)]
mask_data2 <- mask_data[ order(mask_data$len)]
mask_data2 <- mask_data[order(mask_data$len),]
View(mask_data2)
mask_data <- mask_data[order(mask_data$len),]
head(mask_data)
head(mask_data,15)
mask_data[,1]
mask_data[,1:3]
mask_data[,1:4]
mask_data[,1:5]
mask_data <- mask_data[,1:5]
head(mask_data,15)
mask_data <- mask_data[,1:5]
head(mask_data,15)
mask_data2 <- mask_data[,1:4]
head(mask_data2,15)
mask_data <- mask_data[,1:4]
head(mask_data2,15)
head(mask_data,15)
head(mask_data,15)
library(dplyr)
library(httr)
library(jsonlite)
library(RSelenium)
library(stringr)
library(XML)
library(rvest)
library(readxl)
library(readr)
library(rJava)
remdr <- remoteDriver(remoteServerAddr = "localhost",port = 4445L,
browserName = 'chrome') # 기본
remdr$open() # 창을 염
shopping_kkh_fix <- function(x){
remdr$navigate(x)
remdr$executeScript("window.scrollTo(0, 0);")
remdr$executeScript("window.scrollTo(0,document.body.scrollHeight);")
Sys.sleep(1)
remdr$executeScript("window.scrollTo(0, 0);")
html <- read_html(remdr$getPageSource()[[1]])
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
box <- html %>% html_nodes('.basicList_inner__eY_mq')
if (length(box)==0){print('검색결과 없음')}else{
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
items_t <- remdr$findElements(using = 'class', value = 'basicList_mall__sbVax')
item_list_t <- lapply(items_t, function(x){x$getElementText()})
for (i in 1:length(item_list_t)) {
item_1 <- str_split(item_list_t[[i]],'\n') # 3가지 타입 구분하기 1 8 12
id <- box[i] %>% html_nodes('.basicList_info_area__17Xyo') %>%  html_nodes('.basicList_link__1MaTN') %>% html_text()
if( item_1[[1]][1] == "" ){ #이미지 판매처
items <- box[i] %>%  html_nodes('.basicList_mall_title__3MWFY') %>% html_nodes('img') %>% html_attr('alt')
list_shop <- rbind(list_shop,items) #이미지 판매처 넣기
#    Sys.sleep(0.3)
list_id <- rbind(list_id,id) #상품명 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#    Sys.sleep(0.3)
print("이미지 판매처")
cat(i)
}else{
if(item_1[[1]][1] == "쇼핑몰별 최저가"){
aa_s <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_mall_name__1XaKA') %>% html_text()
aa_p <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_price__2r23_') %>% html_text()%>%
str_replace_all('\\D','') %>% as.integer()
for(j in 1:5){
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
list_shop <-rbind(list_shop,aa_s[j])
list_price <- rbind(list_price,aa_p[j])
#      Sys.sleep(0.3)
list_dp <- rbind(list_dp,'0' %>% as.integer())
}
print('가격비교')
cat(i)
}else{
list_shop <- rbind(list_shop,item_1[[1]][1]) #판매처 넣기
#      Sys.sleep(0.3)
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#      Sys.sleep(0.3)
print('기본형식')
cat(i)
}
}
}}; print(paste0(i,'번 끝'))
list_item <- unique(cbind.data.frame(list_id,list_shop,list_price,list_dp))
list_item[is.na(list_item)] <- 0
list_item <- list_item %>% filter(!is.na(list_shop))
return(list_item)
}
#찾고 싶은 상품 검색 후
url <- remdr$getCurrentUrl()
View(url)
#찾고 싶은 상품 검색 후
url <- 'https://search.shopping.naver.com/search/all?query=%EB%A7%88%EC%8A%A4%ED%81%AC&cat_id=&frm=NVSHATC'
#list_kkh <- shopping_kkh_fix(a23[[1]][1])
#write.csv(list_kkh,'C:/Users/USER/Desktop/t.csv')
a<-shopping_kkh_fix(url)
#찾고 싶은 상품 검색 후
url <- remdr$getCurrentUrl()
#찾고 싶은 상품 검색 후
url <- remdr$getCurrentUrl()
#list_kkh <- shopping_kkh_fix(a23[[1]][1])
#write.csv(list_kkh,'C:/Users/USER/Desktop/t.csv')
a<-shopping_kkh_fix(url)
#list_kkh <- shopping_kkh_fix(a23[[1]][1])
#write.csv(list_kkh,'C:/Users/USER/Desktop/t.csv')
a<-shopping_kkh_fix(url)
Sys.sleep(1.5) #컴퓨터 성능에 따라 조절
shopping_kkh_fix <- function(x){
remdr$navigate(x)
remdr$executeScript("window.scrollTo(0, 0);")
remdr$executeScript("window.scrollTo(0,document.body.scrollHeight);")
Sys.sleep(1.5) #컴퓨터 성능에 따라 조절
remdr$executeScript("window.scrollTo(0, 0);")
html <- read_html(remdr$getPageSource()[[1]])
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
box <- html %>% html_nodes('.basicList_inner__eY_mq')
if (length(box)==0){print('검색결과 없음')}else{
list_id <- NULL; list_shop <- NULL; list_price <- NULL; list_dp <- NULL;
items_t <- remdr$findElements(using = 'class', value = 'basicList_mall__sbVax')
item_list_t <- lapply(items_t, function(x){x$getElementText()})
for (i in 1:length(item_list_t)) {
item_1 <- str_split(item_list_t[[i]],'\n') # 3가지 타입 구분하기 1 8 12
id <- box[i] %>% html_nodes('.basicList_info_area__17Xyo') %>%  html_nodes('.basicList_link__1MaTN') %>% html_text()
if( item_1[[1]][1] == "" ){ #이미지 판매처
items <- box[i] %>%  html_nodes('.basicList_mall_title__3MWFY') %>% html_nodes('img') %>% html_attr('alt')
list_shop <- rbind(list_shop,items) #이미지 판매처 넣기
#    Sys.sleep(0.3)
list_id <- rbind(list_id,id) #상품명 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#    Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#    Sys.sleep(0.3)
print("이미지 판매처")
cat(i)
}else{
if(item_1[[1]][1] == "쇼핑몰별 최저가"){
aa_s <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_mall_name__1XaKA') %>% html_text()
aa_p <- box[i] %>% html_nodes('.basicList_mall_list__vIiQw') %>% html_nodes('.basicList_price__2r23_') %>% html_text()%>%
str_replace_all('\\D','') %>% as.integer()
for(j in 1:5){
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
list_shop <-rbind(list_shop,aa_s[j])
list_price <- rbind(list_price,aa_p[j])
#      Sys.sleep(0.3)
list_dp <- rbind(list_dp,'0' %>% as.integer())
}
print('가격비교')
cat(i)
}else{
list_shop <- rbind(list_shop,item_1[[1]][1]) #판매처 넣기
#      Sys.sleep(0.3)
list_id <- rbind(list_id,id)#상품명 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_price_area__1UXXR') %>% html_text() %>% str_replace_all('\\D','  ') %>%
str_sub(1,-3) %>% str_replace_all(' ','') %>% as.integer()
list_price <- rbind(list_price,items) #가격 넣기
#      Sys.sleep(0.3)
items <- box[i] %>% html_nodes('.basicList_mall_option__1qEUo') %>% html_nodes('.basicList_option__3eF2s') %>% html_text()
list_dp <- rbind(list_dp,items[1] %>%
str_replace_all('무료','0') %>% str_replace_all('\\D','') %>% as.integer()) #배송비 넣기
#      Sys.sleep(0.3)
print('기본형식')
cat(i)
}
}
}}; print(paste0(i,'번 끝'))
list_item <- unique(cbind.data.frame(list_id,list_shop,list_price,list_dp))
list_item[is.na(list_item)] <- 0
list_item <- list_item %>% filter(!is.na(list_shop))
return(list_item)
}
#list_kkh <- shopping_kkh_fix(a23[[1]][1])
#write.csv(list_kkh,'C:/Users/USER/Desktop/t.csv')
a<-shopping_kkh_fix(url)
View(a)
View(a)
install.packages('openxlsx')
install.packages('dplyr')
install.packages('rvest')
install.packages('stringr')
install.packages("progress")
library(progress)
library(openxlsx)
library(dplyr)
library(rvest)
library(stringr)
library(tidyr)
choose_file_name = function(file='Select_data_file') {
filename<-tcltk::tk_choose.files(file)
data <- read.xlsx(filename)
# 1> 소재지주소 na인 경우 도로명 주소 가져오기 ==============================
data_doro <- data[is.na(data$소재지전체주소),'도로명전체주소'] %>% str_replace_all("[[:space:]]","+");
row_number <- which(is.na(data$소재지전체주소), arr.ind=TRUE)
# 2> 도로명 주소 > 소재지 주소 =============================================
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (도로명주소변환)",
total = length(data_doro), clear = FALSE, width= 60)
for(i in 1:length(data_doro)){
# progress bar
pb$tick()
# 괄호,쉼표 기준으로 데이터를 분류 후 제일 첫 번째 텍스트(주소)를 가져온다.
a <- data_doro[i] %>% strsplit('[(]|,')
doro_address <- str_trim(a[[1]][1])
# 제일 첫 번째 텍스트(주소)로 url 생성
url <- paste0('https://www.juso.go.kr/support/AddressMainSearch.do?searchKeyword='
,doro_address,
'&dsgubuntext=&dscity1text=&dscounty1text=&dsemd1text=&dsri1text=&dssan1text=&dsrd_nm1text=')
# 해당 주소를 도로명주소 웹을 통해 소재지주소로 변환한다.
tryCatch(
data$소재지전체주소[row_number[i]] <-
read_html(url) %>%
html_nodes(".subject_area") %>%
html_nodes(".subejct_2") %>%
html_nodes(".roadNameText") %>%
html_text() %>%
str_replace_all("\t|\n|\r","") %>%
str_replace_all("  "," "),
error = function(e) {}
)
#  cat(i,row_number[i],data$소재지전체주소[row_number[i]],'\n')
}
# 3> 만약 동 주소를 검색하지 못했을 때 NA값을 도로명 주소로 대체한다.
df = data.frame(x=as.factor(data$소재지전체주소),y=as.factor(data$도로명전체주소))
df2 = as.data.frame(t(apply(df,1, function(x) { return(c(x[!is.na(x)],x[is.na(x)]) )} )))
data$소재지전체주소 <- df2[,1]
# 4> 해당 주소의 읍면동 주소와 주소코드를 저장한다.
folder <- unlist(strsplit(filename, "/(?!.*/)", perl = TRUE))[1]
data2 <- read.xlsx(paste0(folder,'/(필수!) 주소코드&읍면동.xlsx'))
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (주소코드)",
total = nrow(data2), clear = FALSE, width= 60)
for (i in 1:nrow(data2)){
pb$tick()
row_number <- which(str_detect(data$소재지전체주소, data2[i,2]), arr.ind=TRUE)
for (j in row_number){
data[j,'주소코드'] <- data2[i,1]
data[j,'주소명'] <- data2[i,2]
}
}
# 5> 파일 저장
write.xlsx(data,paste0(unlist(strsplit(filename, '[.(?!.*)]', perl = TRUE))[1],'_완료.xlsx'))
print('success!!')
}
choose_file_name()
library(progress)
library(openxlsx)
library(dplyr)
library(rvest)
library(stringr)
library(tidyr)
choose_file_name = function(file='Select_data_file') {
filename<-tcltk::tk_choose.files(file)
data <- read.xlsx(filename)
# 1> 소재지주소 na인 경우 도로명 주소 가져오기 ==============================
data_doro <- data[is.na(data$소재지전체주소),'도로명전체주소'] %>% str_replace_all("[[:space:]]","+");
row_number <- which(is.na(data$소재지전체주소), arr.ind=TRUE)
# 2> 도로명 주소 > 소재지 주소 =============================================
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (도로명주소변환)",
total = length(data_doro), clear = FALSE, width= 60)
for(i in 1:length(data_doro)){
# progress bar
pb$tick()
# 괄호,쉼표 기준으로 데이터를 분류 후 제일 첫 번째 텍스트(주소)를 가져온다.
a <- data_doro[i] %>% strsplit('[(]|,')
doro_address <- str_trim(a[[1]][1])
# 제일 첫 번째 텍스트(주소)로 url 생성
url <- paste0('https://www.juso.go.kr/support/AddressMainSearch.do?searchKeyword='
,doro_address,
'&dsgubuntext=&dscity1text=&dscounty1text=&dsemd1text=&dsri1text=&dssan1text=&dsrd_nm1text=')
# 해당 주소를 도로명주소 웹을 통해 소재지주소로 변환한다.
tryCatch(
data$소재지전체주소[row_number[i]] <-
read_html(url) %>%
html_nodes(".subject_area") %>%
html_nodes(".subejct_2") %>%
html_nodes(".roadNameText") %>%
html_text() %>%
str_replace_all("\t|\n|\r","") %>%
str_replace_all("  "," "),
error = function(e) {}
)
#  cat(i,row_number[i],data$소재지전체주소[row_number[i]],'\n')
}
# 3> 만약 동 주소를 검색하지 못했을 때 NA값을 도로명 주소로 대체한다.
df = data.frame(x=as.factor(data$소재지전체주소),y=as.factor(data$도로명전체주소))
df2 = as.data.frame(t(apply(df,1, function(x) { return(c(x[!is.na(x)],x[is.na(x)]) )} )))
data$소재지전체주소 <- df2[,1]
# 4> 해당 주소의 읍면동 주소와 주소코드를 저장한다.
folder <- unlist(strsplit(filename, "/(?!.*/)", perl = TRUE))[1]
data2 <- read.xlsx(paste0(folder,'/(필수!) 주소코드&읍면동.xlsx'))
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (주소코드)",
total = nrow(data2), clear = FALSE, width= 60)
for (i in 1:nrow(data2)){
pb$tick()
row_number <- which(str_detect(data$소재지전체주소, data2[i,2]), arr.ind=TRUE)
for (j in row_number){
data[j,'주소코드'] <- data2[i,1]
data[j,'주소명'] <- data2[i,2]
}
}
# 5> 파일 저장
write.xlsx(data,paste0(unlist(strsplit(filename, '[.(?!.*)]', perl = TRUE))[1],'_완료.xlsx'))
print('success!!')
}
choose_file_name()
choose_file_name()
choose_file_name()
filename<-tcltk::tk_choose.files(file)
filename<-tcltk::tk_choose.files(file)
data <- read.xlsx('C:/Users/USER/Desktop/읍면동 주소코드/02_03_01_P.xlsx')
data <- read.xlsx('C:/Users/USER/Desktop/읍면동 주소코드/02_03_01_P.xlsx')
data <- read.xlsx('C:/Users/USER/Desktop/읍면동 주소코드/02_03_01_P.xlsx')
?read.xlsx
data <- read.xlsx('C:/Users/USER/Desktop/읍면동 주소코드/02_03_01_P.xlsx')
choose_file_name = function(file='Select_data_file') {
filename<-tcltk::tk_choose.files(file)
data <- read.xlsx(filename)
# 1> 소재지주소 na인 경우 도로명 주소 가져오기 ==============================
data_doro <- data[is.na(data$소재지전체주소),'도로명전체주소'] %>% str_replace_all("[[:space:]]","+");
row_number <- which(is.na(data$소재지전체주소), arr.ind=TRUE)
# 2> 도로명 주소 > 소재지 주소 =============================================
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (도로명주소변환)",
total = length(data_doro), clear = FALSE, width= 60)
for(i in 1:length(data_doro)){
# progress bar
pb$tick()
# 괄호,쉼표 기준으로 데이터를 분류 후 제일 첫 번째 텍스트(주소)를 가져온다.
a <- data_doro[i] %>% strsplit('[(]|,')
doro_address <- str_trim(a[[1]][1])
# 제일 첫 번째 텍스트(주소)로 url 생성
url <- paste0('https://www.juso.go.kr/support/AddressMainSearch.do?searchKeyword='
,doro_address,
'&dsgubuntext=&dscity1text=&dscounty1text=&dsemd1text=&dsri1text=&dssan1text=&dsrd_nm1text=')
# 해당 주소를 도로명주소 웹을 통해 소재지주소로 변환한다.
tryCatch(
data$소재지전체주소[row_number[i]] <-
read_html(url) %>%
html_nodes(".subject_area") %>%
html_nodes(".subejct_2") %>%
html_nodes(".roadNameText") %>%
html_text() %>%
str_replace_all("\t|\n|\r","") %>%
str_replace_all("  "," "),
error = function(e) {}
)
#  cat(i,row_number[i],data$소재지전체주소[row_number[i]],'\n')
}
# 3> 만약 동 주소를 검색하지 못했을 때 NA값을 도로명 주소로 대체한다.
df = data.frame(x=as.factor(data$소재지전체주소),y=as.factor(data$도로명전체주소))
df2 = as.data.frame(t(apply(df,1, function(x) { return(c(x[!is.na(x)],x[is.na(x)]) )} )))
data$소재지전체주소 <- df2[,1]
# 4> 해당 주소의 읍면동 주소와 주소코드를 저장한다.
folder <- unlist(strsplit(filename, "/(?!.*/)", perl = TRUE))[1]
data2 <- read.xlsx(paste0(folder,'/(필수!) 주소코드&읍면동.xlsx'))
pb <- progress_bar$new(format = "downloading [:bar] :current/:total (:percent) in :elapsedfull/:eta (주소코드)",
total = nrow(data2), clear = FALSE, width= 60)
for (i in 1:nrow(data2)){
pb$tick()
row_number <- which(str_detect(data$소재지전체주소, data2[i,2]), arr.ind=TRUE)
for (j in row_number){
data[j,'주소코드'] <- data2[i,1]
data[j,'주소명'] <- data2[i,2]
}
}
# 5> 파일 저장
write.xlsx(data,paste0(unlist(strsplit(filename, '[.(?!.*)]', perl = TRUE))[1],'_완료.xlsx'))
print('success!!')
}
choose_file_name()
warnings()
